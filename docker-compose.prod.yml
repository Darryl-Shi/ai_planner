version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: ai-planner-postgres-prod
    restart: always
    environment:
      POSTGRES_DB: ai_planner
      POSTGRES_USER: ai_planner
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_INITDB_ARGS: "-E UTF8"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/db/schema.sql:/docker-entrypoint-initdb.d/01-schema.sql
    # Don't expose port in production - only accessible via Docker network
    networks:
      - ai-planner-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ai_planner -d ai_planner"]
      interval: 10s
      timeout: 5s
      retries: 5
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: ai-planner-backend-prod
    restart: always
    environment:
      NODE_ENV: production
      PORT: 3001
      FRONTEND_URL: ${FRONTEND_URL}

      # Database
      DATABASE_URL: postgresql://ai_planner:${POSTGRES_PASSWORD}@postgres:5432/ai_planner

      # Security
      SESSION_SECRET: ${SESSION_SECRET}
      ENCRYPTION_KEY: ${ENCRYPTION_KEY}

      # Google OAuth
      GOOGLE_CLIENT_ID: ${GOOGLE_CLIENT_ID}
      GOOGLE_CLIENT_SECRET: ${GOOGLE_CLIENT_SECRET}
      GOOGLE_REDIRECT_URI: ${GOOGLE_REDIRECT_URI}
    # Don't expose port - use reverse proxy (nginx)
    expose:
      - "3001"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - ai-planner-network
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3001/api/auth/status', (r) => process.exit(r.statusCode === 200 ? 0 : 1))"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M

  # Frontend (built static files served by nginx)
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.prod
      args:
        - VITE_API_BASE=${API_BASE_URL}
    container_name: ai-planner-frontend-prod
    restart: always
    # Don't expose ports directly - use reverse proxy manager
    expose:
      - "80"
    depends_on:
      - backend
    networks:
      - ai-planner-network
      - proxy  # External network for reverse proxy
    labels:
      # Nginx Proxy Manager labels
      - "npm.enable=true"
      - "npm.host=${DOMAIN:-calendar.example.com}"
      - "npm.port=80"
      - "npm.proto=http"

      # Traefik labels (alternative)
      - "traefik.enable=true"
      - "traefik.http.routers.ai-planner.rule=Host(`${DOMAIN:-calendar.example.com}`)"
      - "traefik.http.routers.ai-planner.entrypoints=websecure"
      - "traefik.http.routers.ai-planner.tls.certresolver=letsencrypt"
      - "traefik.http.services.ai-planner.loadbalancer.server.port=80"
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M
        reservations:
          cpus: '0.1'
          memory: 128M

volumes:
  postgres_data:
    driver: local

networks:
  ai-planner-network:
    driver: bridge
  proxy:
    external: true
    # This network should be created by your reverse proxy manager
    # For Nginx Proxy Manager: docker network create proxy
    # For Traefik: docker network create traefik
